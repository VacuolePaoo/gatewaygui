name: Mobile Builds

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
          - i686-linux-android
          - x86_64-linux-android
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        add-to-path: false
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-android-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Setup Android environment
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        export TOOLCHAIN_PATH="$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
        export SYSROOT_PATH="$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> $GITHUB_ENV
        echo "$TOOLCHAIN_PATH" >> $GITHUB_PATH
        echo "ANDROID_SYSROOT=$SYSROOT_PATH" >> $GITHUB_ENV
        
        # BoringSSL/quiche specific environment
        echo "CMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
        echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
        
        case ${{ matrix.target }} in
          aarch64-linux-android)
            echo "CC_aarch64_linux_android=$TOOLCHAIN_PATH/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "CXX_aarch64_linux_android=$TOOLCHAIN_PATH/aarch64-linux-android21-clang++" >> $GITHUB_ENV
            echo "AR_aarch64_linux_android=$TOOLCHAIN_PATH/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$TOOLCHAIN_PATH/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "CFLAGS_aarch64_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "CXXFLAGS_aarch64_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
            ;;
          armv7-linux-androideabi)
            echo "CC_armv7_linux_androideabi=$TOOLCHAIN_PATH/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
            echo "CXX_armv7_linux_androideabi=$TOOLCHAIN_PATH/armv7a-linux-androideabi21-clang++" >> $GITHUB_ENV
            echo "AR_armv7_linux_androideabi=$TOOLCHAIN_PATH/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$TOOLCHAIN_PATH/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
            echo "CFLAGS_armv7_linux_androideabi=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "CXXFLAGS_armv7_linux_androideabi=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "ANDROID_ABI=armeabi-v7a" >> $GITHUB_ENV
            ;;
          i686-linux-android)
            echo "CC_i686_linux_android=$TOOLCHAIN_PATH/i686-linux-android21-clang" >> $GITHUB_ENV
            echo "CXX_i686_linux_android=$TOOLCHAIN_PATH/i686-linux-android21-clang++" >> $GITHUB_ENV
            echo "AR_i686_linux_android=$TOOLCHAIN_PATH/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_I686_LINUX_ANDROID_LINKER=$TOOLCHAIN_PATH/i686-linux-android21-clang" >> $GITHUB_ENV
            echo "CFLAGS_i686_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "CXXFLAGS_i686_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "ANDROID_ABI=x86" >> $GITHUB_ENV
            ;;
          x86_64-linux-android)
            echo "CC_x86_64_linux_android=$TOOLCHAIN_PATH/x86_64-linux-android21-clang" >> $GITHUB_ENV
            echo "CXX_x86_64_linux_android=$TOOLCHAIN_PATH/x86_64-linux-android21-clang++" >> $GITHUB_ENV
            echo "AR_x86_64_linux_android=$TOOLCHAIN_PATH/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=$TOOLCHAIN_PATH/x86_64-linux-android21-clang" >> $GITHUB_ENV
            echo "CFLAGS_x86_64_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "CXXFLAGS_x86_64_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "ANDROID_ABI=x86_64" >> $GITHUB_ENV
            ;;
        esac
    - name: Build for Android
      env:
        # Disable some features that might cause issues with cross-compilation
        CARGO_CFG_TARGET_VENDOR: "pc"
      run: |
        # Additional environment setup for Android builds
        case ${{ matrix.target }} in
          i686-linux-android|x86_64-linux-android)
            # Workaround for x86/x86_64 Android CPU feature detection issues
            export RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-Wl,--defsym=__cpu_indicator_init=0 -C link-arg=-Wl,--defsym=__cpu_model=0"
            # Additional linker flags to resolve CPU indicator symbols
            export LDFLAGS="-Wl,--defsym=__cpu_indicator_init=0 -Wl,--defsym=__cpu_model=0"
            ;;
          *android*)
            export RUSTFLAGS="-C target-feature=+crt-static"
            ;;
        esac
        cargo build --release --target ${{ matrix.target }}
    - name: Upload Android binary
      uses: actions/upload-artifact@v4
      with:
        name: wdic-gateway-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/wdic-gateway

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - aarch64-apple-ios
          - x86_64-apple-ios
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-ios-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Build for iOS
      run: cargo build --release --target ${{ matrix.target }}
    - name: Upload iOS binary
      uses: actions/upload-artifact@v4
      with:
        name: wdic-gateway-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/wdic-gateway

  build-harmonyos:
    name: Build HarmonyOS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          # HarmonyOS uses Android-compatible targets
          - aarch64-linux-android  # ARM64 for HarmonyOS
          - armv7-linux-androideabi # ARM32 for HarmonyOS
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Setup Android NDK (for HarmonyOS compatibility)
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        add-to-path: false
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-harmonyos-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Setup HarmonyOS environment
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        export TOOLCHAIN_PATH="$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
        export SYSROOT_PATH="$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> $GITHUB_ENV
        echo "$TOOLCHAIN_PATH" >> $GITHUB_PATH
        echo "ANDROID_SYSROOT=$SYSROOT_PATH" >> $GITHUB_ENV
        
        # BoringSSL/quiche specific environment for HarmonyOS
        echo "CMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
        echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
        
        case ${{ matrix.target }} in
          aarch64-linux-android)
            echo "CC_aarch64_linux_android=$TOOLCHAIN_PATH/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "CXX_aarch64_linux_android=$TOOLCHAIN_PATH/aarch64-linux-android21-clang++" >> $GITHUB_ENV
            echo "AR_aarch64_linux_android=$TOOLCHAIN_PATH/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$TOOLCHAIN_PATH/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "CFLAGS_aarch64_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "CXXFLAGS_aarch64_linux_android=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
            ;;
          armv7-linux-androideabi)
            echo "CC_armv7_linux_androideabi=$TOOLCHAIN_PATH/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
            echo "CXX_armv7_linux_androideabi=$TOOLCHAIN_PATH/armv7a-linux-androideabi21-clang++" >> $GITHUB_ENV
            echo "AR_armv7_linux_androideabi=$TOOLCHAIN_PATH/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$TOOLCHAIN_PATH/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
            echo "CFLAGS_armv7_linux_androideabi=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "CXXFLAGS_armv7_linux_androideabi=--sysroot=$SYSROOT_PATH" >> $GITHUB_ENV
            echo "ANDROID_ABI=armeabi-v7a" >> $GITHUB_ENV
            ;;
        esac
    - name: Build for HarmonyOS
      env:
        # Disable some features that might cause issues with cross-compilation
        CARGO_CFG_TARGET_VENDOR: "pc"
      run: |
        # Additional environment setup for HarmonyOS builds
        case ${{ matrix.target }} in
          *android*)
            export RUSTFLAGS="-C target-feature=+crt-static"
            ;;
        esac
        cargo build --release --target ${{ matrix.target }}
    - name: Upload HarmonyOS binary
      uses: actions/upload-artifact@v4
      with:
        name: wdic-gateway-harmonyos-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/wdic-gateway