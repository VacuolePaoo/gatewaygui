name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v0.3.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: false  # Disable this job since we're using softprops/action-gh-release in build jobs
    steps:
    - name: Placeholder
      run: echo "Release creation handled by build jobs"

  build-and-upload:
    name: Build and Upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: wdic-gateway-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: wdic-gateway-linux-aarch64
            cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            asset_name: wdic-gateway-linux-armv7
            cross: true
          
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: wdic-gateway-windows-x86_64.exe
            cross: false
          
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: wdic-gateway-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: wdic-gateway-macos-aarch64
            cross: false
          
          # Android targets
          - os: ubuntu-latest
            target: aarch64-linux-android
            asset_name: wdic-gateway-android-aarch64
            cross: true
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            asset_name: wdic-gateway-android-armv7
            cross: true
          - os: ubuntu-latest
            target: i686-linux-android
            asset_name: wdic-gateway-android-i686
            cross: true
          - os: ubuntu-latest
            target: x86_64-linux-android
            asset_name: wdic-gateway-android-x86_64
            cross: true
          
          # iOS targets
          - os: macos-latest
            target: aarch64-apple-ios
            asset_name: wdic-gateway-ios-aarch64
            cross: false
          - os: macos-latest
            target: x86_64-apple-ios
            asset_name: wdic-gateway-ios-x86_64
            cross: false

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup Android NDK
      if: contains(matrix.target, 'android')
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false
    
    - name: Install build dependencies (Android)
      if: contains(matrix.target, 'android')
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm
    
    - name: Setup Android environment
      if: contains(matrix.target, 'android')
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        case ${{ matrix.target }} in
          aarch64-linux-android)
            echo "CC_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "AR_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            ;;
          armv7-linux-androideabi)
            echo "CC_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
            echo "AR_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            ;;
          i686-linux-android)
            echo "CC_i686_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang" >> $GITHUB_ENV
            echo "AR_i686_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            ;;
          x86_64-linux-android)
            echo "CC_x86_64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
            echo "AR_x86_64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            ;;
        esac
    
    - name: Install cross-compilation tools (Linux)
      if: matrix.cross && runner.os == 'Linux' && !contains(matrix.target, 'android')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf nasm

    - name: Install NASM (Windows)
      if: runner.os == 'Windows'
      run: choco install nasm
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare binary
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp target/${{ matrix.target }}/release/wdic-gateway.exe ${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/wdic-gateway ${{ matrix.asset_name }}
        fi
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        files: ${{ matrix.asset_name }}

  build-harmonyos:
    name: Build HarmonyOS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-linux-android  # HarmonyOS ARM64
          - armv7-linux-androideabi # HarmonyOS ARM32
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-harmonyos-${{ matrix.target }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false
    
    - name: Install build dependencies (HarmonyOS)
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm
    
    - name: Setup HarmonyOS environment
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        case ${{ matrix.target }} in
          aarch64-linux-android)
            echo "CC_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "AR_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            asset_name="wdic-gateway-harmonyos-aarch64"
            ;;
          armv7-linux-androideabi)
            echo "CC_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
            echo "AR_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            asset_name="wdic-gateway-harmonyos-armv7"
            ;;
        esac
        echo "ASSET_NAME=$asset_name" >> $GITHUB_ENV
    
    - name: Build HarmonyOS binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare HarmonyOS binary
      run: cp target/${{ matrix.target }}/release/wdic-gateway ${{ env.ASSET_NAME }}
    
    - name: Upload HarmonyOS Release Asset
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        files: ${{ env.ASSET_NAME }}